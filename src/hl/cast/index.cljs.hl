(page "index.html"
      (:require [tailrecursion.hoplon.storage-atom :refer [local-storage]]
                [datascript :as d]))

; --------------------------
; Input Cells
; --------------------------

(defc state nil)

; --------------------------
; Datascript set up
; --------------------------

(def conn (d/create-conn))

(d/listen! conn #(reset! state @conn))

(d/transact! conn [{:db/id -1
                    :feature/title "A feature"
                    :feature/description "A descriptions"}
                   {:db/id -2
                    :feature/title "Another feature"
                    :feature/description "Another description"}
                   {:db/id -3
                    :user/name "Daniel"}
                   {:db/id -4
                    :user/name "Bob"}])


; --------------------------
; Formula Cells
; --------------------------

(defc= users
  (d/q '[:find ?e
         :in $
         :where
         [?e :user/name ?n]]))

(defc= current-user-id (ffirst users))

(defc= features
  (d/q '[:find ?e ?t ?d
         :in $
         :where
         [?e :feature/title ?t]
         [?e :feature/description ?d]] state))

(defn vote-count [state id]
  (if-let [[f c] (first (d/q '[:find ?feature (count ?v)
                               :in $ ?feature
                               :where
                               [?v :vote/feature ?feature]] state id))]
    c 0))

(defc= features-with-votes
    (for [[id t d] features]
      [id t d (vote-count state id)]))

(doseq [[id t d v] @features-with-votes]
  (println id t d v))

; --------------------------
; Commands
; --------------------------

(defn up-vote! [state feature user]
  (d/transact! conn [{:db/id -1
                      :vote/feature feature
                      :vote/user user}]))

(defn down-vote! [state feature user]
  (when-let [[e] (first (d/q '[:find ?e
                               :in $ ?feature ?user
                               :where
                               [?e :vote/feature ?feature]
                               [?e :vote/user ?user]] state feature user))]
    (d/transact! conn [[:db.fn/retractEntity e]])))

; --------------------------
; Page
; --------------------------

(html
 (head
  (link :rel "stylesheet" :href "http://yui.yahooapis.com/pure/0.4.2/pure-min.css")
  (link :rel "stylesheet" :href "css/main.css")
  (script :type "text/javascript" :id "lt_ws" :src "http://localhost:49191/socket.io/lighttable/ws.js"))
 (body
  (div :class "pure-g content"
       (h2 :class "pure-u-1 l-box" (text "You have some votes remaining"))
       (loop-tpl :bindings [[id title description votes] features-with-votes]
                 (div :class "pure-g pure-u-1 l-box"
                      (div :class "pure-u-3-5"
                           (span :class "title" (text "~{title}"))
                           (span :class "description" (text "~{description}")))
                      (div :class "pure-u-1-5"
                           (span :class "votes" (text "~{votes}")))
                      (div :class "pure-u-1-5"
                           (button
                            :class (cell= {:pure-button true
                                           :button-vote true})
                            :on-click #(up-vote! @state @id @current-user-id)
                            "+")
                            (button
                             :class (cell= {:pure-button true
                                            :button-unvote true})
                             :on-click #(down-vote! @state @id @current-user-id)
                             "-")))))))

