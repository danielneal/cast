(page "index.html"
      (:require [tailrecursion.hoplon.storage-atom :refer [local-storage]]
                [datascript :as d]
                [cast.rpc :as rpc]))


; --------------------------
; Initialization
; --------------------------

(defn init! [mode]
  (let [schema {:vote/user {:db.valueType :db.type/ref}
                :vote/feature {:db.valueType :db.type/ref}}]
    (if (= mode :local)
      (let [conn (d/create-conn schema)
            db (cell nil)]
        (d/listen! conn #(reset! db @conn))
        {:transact! (fn [tx-data]  (d/transact! conn tx-data))
         :db db})

      (let [db (cell= (d/with (d/empty-db schema) rpc/entities))]
        (rpc/get-entities)
        (js/setInterval rpc/get-entities 5000)
        {:transact! (fn [tx-data] (rpc/transact! tx-data))
         :db db }))))

(let [{t :transact! d :db}  (init! :local)]
  (def transact! t)
  (def db d))

(transact! [{:db/id -1
             :feature/title "A feature"
             :feature/description "A descriptions"}
            {:db/id -2
             :feature/title "Another feature"
             :feature/description "Another description"}
            {:db/id -3
             :user/name "Daniel"
             :user/max-votes 10}
            {:db/id -4
             :user/name "Bob"
             :user/max-votes 10}
            {:db/id -5
             :page/name "Ida"}
            {:db/id -6
             :page/name "SugarCRM"}])

; --------------------------
; Input Cells
; --------------------------

(defc current-user-id nil)

(defc frozen-sort-order nil)

; --------------------------
; Derived state
; --------------------------

(defc= current-user-name
  (ffirst (d/q '[:find ?n
                 :in $ ?u
                 :where [?u :user/name ?n]] db current-user-id)))

(defc= logged-in? (not (nil? current-user-id)))

(defc= users
  (d/q '[:find ?e
         :in $
         :where
         [?e :user/name ?n]] db))

(defc= features
  (d/q '[:find ?e ?t ?d
         :in $
         :where
         [?e :feature/title ?t]
         [?e :feature/description ?d]] db))

(defc= user-vote-counts
  (d/q '[:find ?f (count ?v)
         :in $ ?u
         :where
         [?v :vote/feature ?f]
         [?v :vote/user ?u]] db current-user-id))

(defc= total-vote-counts
  (d/q '[:find ?f (count ?v)
         :in $
         :where
         [?v :vote/feature ?f]] db))

(defc= pages
  (d/q '[:find ?p ?n
         :in $
         :where
         [?p :page/name ?n]] db))

(defc= combined-counts
  (merge-with merge
              (into {} (for [[id c] user-vote-counts] [id {:user c}]))
              (into {} (for [[id c] total-vote-counts] [id {:total c}]))))

(defc= features-with-votes
  (into [] (for [[id t d] features]
             (let [c (merge {:user 0 :total 0} (combined-counts id))]
               [id t d (:total c) (:user c)]))))

(defc= sort-order
  (->> (map vector features-with-votes (iterate inc 0))
       (sort-by #(get-in % [0 3]))
       (reverse)
       (map #(get % 1))))

(defc= sorted-features
  (map #(get features-with-votes %) (if logged-in? frozen-sort-order sort-order)))

(defc= votes-remaining
  (let [max-votes (ffirst (d/q '[:find ?m
                                 :in $ ?u
                                 :where
                                 [?u :user/max-votes ?m]] db current-user-id))
        current-votes (ffirst (d/q '[:find (count ?v)
                                     :in $ ?u
                                     :where
                                     [?v :vote/user ?u]
                                     [?v :vote/feature ?f]] db current-user-id))]
    (- max-votes current-votes)))

; --------------------------
; Commands
; --------------------------

(defn up-vote! [db feature user]
  (transact! [{:db/id -1
               :vote/feature feature
               :vote/user user}]))

(defn down-vote! [db feature user]
  (when-let [[e] (first (d/q '[:find ?e
                               :in $ ?feature ?user
                               :where
                               [?e :vote/feature ?feature]
                               [?e :vote/user ?user]] db feature user))]
    (transact! [[:db.fn/retractEntity e]])))

(defn add-feature! [db title description]
  (transact! [{:db/id -1
               :feature/title title
               :feature/description description}]))

(defn login! [db username]
  (when-let [u (ffirst (d/q '[:find ?u
                              :in $ ?n
                              :where [?u :user/name ?n]] db username))]
    (reset! frozen-sort-order @sort-order)
    (reset! current-user-id u)))


(defn logout! [db]
  (reset! current-user-id nil))

; --------------------------
; Page
; --------------------------

(html
 (head
  (link :rel "stylesheet" :type "text/css" :href "css/main.css"))
 (body
  (div :class "ui inverted fixed blue main menu"
       (a :class "active item" "CAST")
       (div :class "right menu"
            :do-toggle logged-in?
            (div :class "item"
                 (text "~{votes-remaining} votes left"))
            (div :class "ui simple dropdown item"
                 (text "~{current-user-name}")
                 (div :class "menu"
                      (loop-tpl :bindings [[id page-name] pages]
                                :reverse true
                                (div :class "item" page-name))
                      (div :class "item" :on-click #(logout! @db) "Log out")))))
  (div :class "ui page grid"
       (div :class "ui form segment"
            :do-toggle (cell= (not logged-in?))
            (div :class "field"
                 (label "Username")
                 (div :class "ui left labeled icon input"
                      (input :type "text" :placeholder "Username")
                      (i :class "user icon")
                      (div :class "ui corner label"
                           (i :class "icon asterisk"))))
            (div :class "field"
                 (label "Password")
                 (div :class "ui left labeled icon input"
                      (input :type "password")
                      (i :class "lock icon")
                      (div :class"ui corner label"
                           (i :class "icon asterisk")))))
       (div :do-toggle logged-in?
        (loop-tpl :bindings [[id title description votes my-votes] sorted-features]
                  (let [votes-available (cell= (> votes-remaining 0))
                        voted-for-this (cell= (> my-votes 0))]
                    (div :class "sixteen wide column"
                         (div :class "ui blue segment"
                              (h4 :class "ui left floated header" (text "~{title}"))
                              (div :class "ui mini buttons"
                                   :do-toggle logged-in?
                                   (div :class "ui green icon button"
                                        (i :class "icon plus"
                                           :on-click #(when @votes-available
                                                        (up-vote! @db @id @current-user-id))))
                                   (div :class "ui red icon button"
                                        (i :class "icon minus"
                                           :on-click #(down-vote! @db @id @current-user-id))))
                              (div :class "ui top right attached label" (text "~{votes}"))
                              (div :class "ui clearing divider")
                              (p (text "~{description}"))))))))))

