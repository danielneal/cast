(page "index.html"
      (:require [tailrecursion.hoplon.storage-atom :refer [local-storage]]
                [datascript :as d]
                [cljs.core.match]
                [cljs.core.async :as async :refer [<! >! put! chan]]
                [taoensso.sente :as sente :refer [cb-success?]])
      (:require-macros [cljs.core.match.macros :refer [match]]
                       [cljs.core.async.macros :as asyncm :refer (go go-loop)]))


 (def ^:dynamic *mode* :remote)

; --------------------------
; Websocket set up
; --------------------------

(let [{:keys [chsk ch-recv send-fn state]} (sente/make-channel-socket! "/chsk"  {:type :auto})]
  (def chsk       chsk)
  (def ch-chsk    ch-recv) ; ChannelSocket's receive channel
  (def chsk-send! send-fn) ; ChannelSocket's send API fn
  (def chsk-state state))  ; Watchable, read-only atom

; --------------------------
; Initialization
; --------------------------


(def db (cell nil))

(defn init! [mode]
  (let [schema {:vote/user {:db/valueType :db.type/ref}
                :vote/feature {:db/valueType :db.type/ref}
                :feature/page {:db/valueType :db.type/ref}}]
      (let [conn (d/create-conn schema)]
        (d/listen! conn #(reset! db @conn))
        (fn [tx-data] (d/transact! conn tx-data)))))

(def transact! (init! *mode*))

; --------------------------
; Input Cells
; --------------------------

(defc current-user-id nil)

(defc current-page nil)

(add-watch current-user-id nil (fn [k r o n] (println n)))

; --------------------------
; Derived state
; --------------------------

(defc= current-user-name
  (ffirst (d/q '[:find ?n
                 :in $ ?u
                 :where [?u :user/name ?n]] db current-user-id)))

(defc= logged-in? (not (nil? current-user-id)))

(defc= users
  (d/q '[:find ?e
         :in $
         :where
         [?e :user/name ?n]] db))

(defc= features
  (d/q '[:find ?e ?t ?d
         :in $ ?p
         :where
         [?e :feature/title ?t]
         [?e :feature/description ?d]
         [?e :feature/page ?p]] db current-page))

(defc= user-vote-counts
  (d/q '[:find ?f (count ?v)
         :in $ ?u ?p
         :where
         [?v :vote/feature ?f]
         [?v :vote/user ?u]
         [?f :feature/page ?p]] db current-user-id current-page))

(defc= total-vote-counts
  (d/q '[:find ?f (count ?v)
         :in $
         :where
         [?v :vote/feature ?f]
         [?f :feature/page ?p]] db current-page))

(defc= pages
  (d/q '[:find ?p ?n
         :in $
         :where
         [?p :page/name ?n]] db))

(defc= combined-counts
  (merge-with merge
              (into {} (for [[id c] user-vote-counts] [id {:user c}]))
              (into {} (for [[id c] total-vote-counts] [id {:total c}]))))

(defc= features-with-votes
  (into [] (for [[id t d] features]
             (let [c (merge {:user 0 :total 0} (combined-counts id))]
               [id t d (:total c) (:user c)]))))

(defc= sort-order
  (->> (map vector features-with-votes (iterate inc 0))
       (sort-by #(get-in % [0 3]))
       (reverse)
       (map #(get % 1))))

(defc= sorted-features
  (map #(get features-with-votes %) sort-order))

(defc= votes-remaining
  (let [max-votes (ffirst (d/q '[:find ?m
                                 :in $ ?u
                                 :where
                                 [?u :user/max-votes ?m]] db current-user-id))
        current-votes (ffirst (d/q '[:find (count ?v)
                                     :in $ ?u
                                     :where
                                     [?v :vote/user ?u]] db current-user-id))]
    (- max-votes current-votes)))

; --------------------------
; Commands
; --------------------------

(defn do-cmd! [cmd & args]
  (match [cmd *mode* args]

         [:up-vote _ ([db feature user] :seq)]
         (transact! [{:db/id -1
                      :vote/feature feature
                      :vote/user user}])

         [:down-vote _ ([db feature user] :seq)]
         (when-let [[e] (first (d/q '[:find ?e
                                      :in $ ?feature ?user
                                      :where
                                      [?e :vote/feature ?feature]
                                      [?e :vote/user ?user]] db feature user))]
           (transact! [[:db.fn/retractEntity e]]))

         [:add-feature _ ([db title description] :seq)]
         (transact! [{:db/id -1
                      :feature/title title
                      :feature/description description}])

         [:login :local ([db username password] :seq)]
         (when-let [u (ffirst (d/q '[:find ?u
                                     :in $ ?n
                                     :where [?u :user/name ?n]] db username))]
           (reset! current-page (ffirst @pages))
           (reset! current-user-id u))

         [:login :remote ([db username password] :seq)]
         (chsk-send! [:cast/login [username password]] 8000
                     #(let [{u :user-id e :entities} %]
                        (println u)
                        (println e)
                        (transact! e)
                        (reset! current-user-id u)
                        (reset! current-page (ffirst @pages))))

         [:logout _ ([db] :seq)]
         (do
           (reset! current-page nil)
           (reset! current-user-id nil))

         [:set-page _ ([db id] :seq)]
         (reset! current-page id)

         :else (println "Command not recognised: " cmd *mode* args)))


; --------------------------
; Page
; --------------------------

(html
 (head
  (link :rel "stylesheet" :type "text/css" :href "css/main.css"))
 (body
  (div :class "ui inverted fixed blue main menu"
       (div :class "ui simple dropdown item" "CAST"
            (div :class "menu"
                 :do-toggle logged-in?
                 (loop-tpl :bindings [[id page-name] pages]
                           :reverse true
                           (div :class "item"
                                :on-click #(do-cmd! :set-page @db @id) page-name))))
       (div :class "right menu"
            :do-toggle logged-in?
            (div :class "item"
                 (text "~{votes-remaining} votes left"))
            (div :class "ui simple dropdown item"
                 (text "~{current-user-name}")
                 (div :class "menu"
                      (div :class "item" :on-click #(do-cmd! :logout @db) "Log out")))))

  (div :class "container"
       (div :class "ui form segment"
            :do-toggle (cell= (not logged-in?))
            (div :class "field"
                 (label "Username")
                 (div :class "ui left labeled icon input"
                      (input :type "text" :id "username" :placeholder "Username")
                      (i :class "user icon")
                      (div :class "ui corner label"
                           (i :class "icon asterisk"))))
            (div :class "field"
                 (label "Password")
                 (div :class "ui left labeled icon input"
                      (input :type "password" :id "password")
                      (i :class "lock icon")
                      (div :class"ui corner label"
                           (i :class "icon asterisk"))))
            (div :class "ui blue submit button"
                 :on-click #(do-cmd! :login @db (val-id "username") (val-id "password"))
                 "Login"))

       (div :do-toggle logged-in?
            (loop-tpl :bindings [[id title description votes my-votes] sorted-features]
                      (let [votes-available (cell= (> votes-remaining 0))
                            voted-for-this (cell= (> my-votes 0))]
                        (div :class "ui blue segment"
                             (h4 :class "ui left floated header" (text "~{title}"))
                             (div :class "ui mini buttons"
                                  :do-toggle logged-in?
                                  (div :class "ui green icon button"
                                       (i :class "icon plus"
                                          :on-click #(when @votes-available (do-cmd! :up-vote @db @id @current-user-id))))
                                  (div :class "ui red icon button"
                                       (i :class "icon minus"
                                          :on-click #(do-cmd! :down-vote @db @id @current-user-id))))
                             (div :class "ui top right attached label" (text "~{votes}"))
                             (div :class "ui clearing divider")
                             (p (text "~{description}")))))))))

