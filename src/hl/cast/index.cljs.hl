(page "index.html"
      (:require [tailrecursion.hoplon.storage-atom :refer [local-storage]]
                [datascript :as d]
                [cast.rpc :as rpc]))

; --------------------------
; Stem state
; --------------------------
(defc current-user-id nil)
(defc conn nil)

; --------------------------
; DB Initialization
; --------------------------

(defn initializer [mode]
  (if (= mode :local)
    (fn []
      (let [conn (d/create-conn)
            db (cell nil)]
        (d/listen! conn #(reset! db @conn))
        {:transact! (fn [tx-data] (d/transact! conn tx-data))
         :db db}))
    (fn []
      (js/setInterval rpc/get-entities 1000)
      {:transact! (fn [tx-data] (rpc/transact! tx-data))
       :db (cell= (d/with (d/empty-db) rpc/entities))})))

(def init! (initializer :local))

(let [{t :transact!
       d :db} (init!)]
  (def transact! t)
  (def db d))

(println transact!)

(transact! [{:feature/title "A feature"
             :feature/description "A descriptions"}
            {:feature/title "Another feature"
             :feature/description "Another description"}
            {:user/name "Daniel"
             :user/max-votes 10}
            {:user/name "Bob"
             :user/max-votes 10}])

; --------------------------
; Derived state
; --------------------------

(defc= users
  (d/q '[:find ?e
         :in $
         :where
         [?e :user/name ?n]] db))

(defc= features
  (d/q '[:find ?e ?t ?d
         :in $
         :where
         [?e :feature/title ?t]
         [?e :feature/description ?d]] db))

(defn vote-count [db id]
  (if-let [[f c] (first (d/q '[:find ?feature (count ?v)
                               :in $ ?feature
                               :where
                               [?v :vote/feature ?feature]] db id))]
    c 0))

(defc= features-with-votes
  (->> (for [[id t d] features]
         [id t d (vote-count db id)])
       (sort-by last)
       (reverse)))


(defc= votes-remaining
  (let [max-votes (ffirst (d/q '[:find ?m
                                 :in $ ?u
                                 :where
                                 [?u :user/max-votes ?m]] db current-user-id))
        current-votes (ffirst (d/q '[:find (count ?v)
                                     :in $ ?u
                                     :where
                                     [?v :vote/user ?u]
                                     [?v :vote/feature ?f]] db current-user-id))]
    (- max-votes current-votes)))

(defc= current-user-name
  (ffirst (d/q '[:find ?n
                 :in $ ?u
                 :where [?u :user/name ?n]] db current-user-id)))

(defc= logged-in? (not (nil? current-user-id)))

; --------------------------
; Commands
; --------------------------

(defn up-vote! [db feature user]
  (transact! [{:vote/feature feature
               :vote/user user}]))

(defn down-vote! [db feature user]
  (when-let [[e] (first (d/q '[:find ?e
                               :in $ ?feature ?user
                               :where
                               [?e :vote/feature ?feature]
                               [?e :vote/user ?user]] db feature user))]
    (transact! [[:db.fn/retractEntity e]])))

(defn add-feature! [db title description]
  (transact! [{:feature/title title
                 :feature/description description}]))

(defn login! [db username]
  (when-let [u (ffirst (d/q '[:find ?u
                              :in $ ?n
                              :where [?u :user/name ?n]] db username))]
    (reset! current-user-id u)))


(defn logout! [db]
  (reset! current-user-id nil))



; --------------------------
; Page
; --------------------------

(html
 (head
  (link :rel "stylesheet" :href "http://yui.yahooapis.com/pure/0.5.0/pure-min.css")
  (link :rel "stylesheet" :href "css/main.css")
  (script :type "text/javascript" :id "lt_ws" :src "http://localhost:49191/socket.io/lighttable/ws.js"))
 (body
  (div :class "header"
       (h1 "Cast")
       (form
        :class "pure-form"
        (fieldset :do-toggle (cell= (not logged-in?))
                  (input :type "text" :id "username" :placeholder "Username")
                  (button :on-click #(login! @db (val-id "username")) :class "pure-button pure-button-primary" "Log in"))
        (fieldset :do-toggle logged-in?
                  (label (text "~{votes-remaining} votes remaining"))
                  (label (text "Logged in as ~{current-user-name}"))
                  (button :class "pure-button pure-button-primary" :on-click #(logout! @db) "Log out"))))
  (div :class "pure-g content"
       (loop-tpl :bindings [[id title description votes] features-with-votes]
                 (div :class "pure-g pure-u-1 l-box"
                      (div :class "pure-u-3-5"
                           (span :class "title" (text "~{title}"))
                           (span :class "description" (text "~{description}")))
                      (div :class "pure-u-1-5"
                           (span :class "votes" (text "~{votes}")))
                      (let [votes-available (cell= (> votes-remaining 0))]
                        (div :class "pure-u-1-5"
                             :do-toggle logged-in?
                             (button
                              :class "pure-button button-vote up-vote"
                              :on-click #(when @votes-available
                                           (up-vote! @db @id @current-user-id))
                              "+")
                             (button
                              :class "pure-button button-vote down-vote"
                              :on-click #(down-vote! @db @id @current-user-id)
                              "-"))))))))

